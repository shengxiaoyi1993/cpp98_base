# 8 仿函數
- 仿函数
- 函数配接器（function adapters）
- 功能复合（functional composition）

## 8.1 仿函数概念(functor)
- 在仿函数类别operator()内撰写代码
- 优点
  - 拥有状态
  - 将仿函数的型别当作template参数进行传递
  - 执行速度比函数指针更快
### 8.1.1 仿函数当作排序准则
### 8.1.2 拥有内部状态 Internal State
-  传值 方式传入算法->外部的仿函数没有变化
- 若要仿函数保存算法中的变化
  - 可通过传址方式传入，使用算法时明确指明该参数是引用...<Type &> var
  - 使用foreach的方法回返值
### 8.1.3 foreach()的回返值
- foreach()会回返其仿函数
- 给仿函数添加一个自定型别转换
### 8.1.4 判断式(Predicates)和仿函数(Functors)
- 返回bool值的函数或者仿函数
- 由于c++Standard未明确标明判断式是否可被算法复制一副本，因此判断式 不应该因为被调用而改变判断式的状态
### 8.2 预定义的仿函数
- 保存在<functional>

### 8.2.1 函数配接器（Function Adapters）
- 将一个仿函数与另一个仿函数（或者某个值，一般函数）结合起来的仿函数
- bind2nd() :bind2nd(greater<int>(),42)
- 预定义的函数配接器
  - bind1st(op,value) op(value,param)
  - bind2nd(op,value) op(value,param)
  - not1(op)   !op(0)
  - not2(op)  ！op(p1,p2)

- 函数配接器本身就是仿函数，因此可以多层次组合：功能复合，函数复合
### 8.2.2 针对函数成员而设计的函数配接器
- 针对集群内地每个元素调用其non-const成员函数
- 配接器形式
  - mem_fun_ref(op):某对象
  - mem_fun(op)：某对象指针

### 8.2.3 针对一般函数而设计的函数配接器
- ptr_fun(op) op(param) op(param1,param2)

### 8.2.4 能使用函数配接器的自定义仿函数
- 自定义的仿函数需要提供一些型别成员来反映参数和返回值的型别
- c++提供了一些型别，只要仿函数继承这三种型别之一就能可配接（unary_function,binary_function）

## 8.3 辅助用组合型仿函数
- f(g(elem))
- f(g(elem1,elem2))
- f(g(elem),h(elem))
- f(g(elem1),h(elem2)

### 8.3.1 一元组合函数配接器
- compose_f_gx 进行嵌套计算：传入的参数先作为第二个函数进行计算，然后再将传出的结果作为第二个函数的参数进行计算
  - op1(op2(x))
- compose_f_px_hx 组合两个运作准则：
  -op1(op2(x),op3(x))

### 8.3.2 二元函数配接器
- compose_f_px_hx 将两个一元运算的结果加以处理（分别接收不同参数）
  - op1(op2(x),op3(y))
  
